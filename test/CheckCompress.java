import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.DataFormatException;
import java.util.zip.Deflater;
import java.util.zip.Inflater;

class CheckCompress
{
	public static byte[] compressBytes(String data) throws UnsupportedEncodingException, IOException
	{
		byte[] input = data.getBytes("UTF-8");  //the format... data is the total string
		Deflater df = new Deflater();       //this function mainly generate the byte code
		//df.setLevel(Deflater.BEST_COMPRESSION);
		df.setInput(input);

		ByteArrayOutputStream baos = new ByteArrayOutputStream(input.length);   //we write the generated byte code in this array
		df.finish();
		byte[] buff = new byte[1024];   //segment segment pop....segment set 1024
		while(!df.finished())
		{
		    int count = df.deflate(buff);       //returns the generated code... index
		    baos.write(buff, 0, count);     //write 4m 0 to count
		}
		baos.close();
		byte[] output = baos.toByteArray();

		System.out.println("Original: "+input.length);
		System.out.println("Compressed: "+output.length);
		return output;
	}
 
	public static String extractBytes(byte[] input) throws UnsupportedEncodingException, IOException, DataFormatException
	{
		Inflater ifl = new Inflater();   //mainly generate the extraction
		//df.setLevel(Deflater.BEST_COMPRESSION);
		ifl.setInput(input);

		ByteArrayOutputStream baos = new ByteArrayOutputStream(input.length);
		byte[] buff = new byte[1024];
		while(!ifl.finished())
		{
		    int count = ifl.inflate(buff);
		    baos.write(buff, 0, count);
		}
		baos.close();
		byte[] output = baos.toByteArray();

		System.out.println("Original: "+input.length);
		System.out.println("Extracted: "+output.length);
		//System.out.println("Data:");
		//System.out.println(new String(output));
		return new String(output);
	}
 
	public static void main(String[] args)
	{
		String text = args[0];
	        
		try 
		{
		    	//compress this text to byte array
		    	byte[] compressedText = compressBytes(text);
			String cs = new String(compressedText);

	 
		    // now again extract this string from byte
	 
		    String extractedText = extractBytes(compressedText);
		    String extractedText2 = extractBytes(cs.getBytes());
	 
		    System.out.println("Extracted string:");
		    System.out.println(extractedText);

		    System.out.println("Extracted string 2:");
		    System.out.println(extractedText2);
	 
		}
		catch (DataFormatException ex)
		{
		    ex.printStackTrace();
		}
		catch (UnsupportedEncodingException ex)
		{
		    ex.printStackTrace();
		}
		catch (IOException ex)
		{
		    ex.printStackTrace();
		}
	
	}
}
